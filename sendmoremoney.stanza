defpackage sendmoremoney:
    import core
    import collections

val debug = false

defn dprintln (x) :
    println(x) when debug

val args = command-line-arguments()
if length(args) < 4:
    fatal("Too few Parameters")

val i0-str = args[1]
val i1-str = args[2]
val o0-str = args[3]

defstruct Sample :
    a : Int|False|True      ; True means ignored. False means unassigned. Int means assigned
    b : Int|False|True
    c : Int|False|True
    d : Int|False|True
    e : Int|False|True
    f : Int|False|True
    g : Int|False|True
    h : Int|False|True
    i : Int|False|True
    j : Int|False|True
    k : Int|False|True
    l : Int|False|True
    m : Int|False|True
    n : Int|False|True
    o : Int|False|True
    p : Int|False|True
    q : Int|False|True
    r : Int|False|True
    s : Int|False|True
    t : Int|False|True
    u : Int|False|True
    v : Int|False|True
    w : Int|False|True
    x : Int|False|True
    y : Int|False|True
    z : Int|False|True
 

;     S E N D
; +   M O R E
;------------
;   M O N E Y
;
val i0 = to-list $ to-seq $ i0-str
val i1 = to-list $ to-seq $ i1-str
val o0 = to-list $ to-seq $ o0-str

val char-map = [
    'a' => a
    'b' => b
    'c' => c
    'd' => d
    'e' => e
    'f' => f
    'g' => g
    'h' => h
    'i' => i
    'j' => j
    'k' => k
    'l' => l
    'm' => m
    'n' => n
    'o' => o
    'p' => p
    'q' => q
    'r' => r
    's' => s
    't' => t
    'u' => u
    'v' => v
    'w' => w
    'x' => x
    'y' => y
    'z' => z
]

val input0 = to-vector<(Sample -> Int|False|True)>(reverse $ to-list $ map({lookup(char-map _)} i0))
val input1 = to-vector<(Sample -> Int|False|True)>(reverse $ to-list $ map({lookup(char-map _)} i1))
val output = to-vector<(Sample -> Int|False|True)>(reverse $ to-list $ map({lookup(char-map _)} o0))
val rank = max(max(length(input0) length(input1)) length(output))
dprintln("rank=%_" % [rank])

; build priority
defn add-unique (v : Vector<Equalable> a : Equalable):
    match(find({_ == a} v)):
        (f : False) : 
            dprintln("%_ is added" % [a])
            add(v a)
        (t) : false

val priority-vector = Vector<Char>()
add-unique(priority-vector o0[0])
add-unique(priority-vector i0[0]) 
add-unique(priority-vector i1[0])
for n in (rank - 1) through 0 by (- 1) do:
    add-unique(priority-vector o0[n]) when n < length(o0)
    add-unique(priority-vector i0[n]) when n < length(i0)
    add-unique(priority-vector i1[n]) when n < length(i1)
val priority-char = unique $ to-list $ priority-vector
val priority-index = map({compare(_ 'a')} priority-char)
dprintln(priority-index)

defn xnor (a : True|False b : True|False) -> True|False :
    (a and b) or (not a and not b)

;
; There are two possible output. Conflicted returns True, else returns False
;
defn add-digit (a : Int b : Int c : Int carry? : True|False overthrow? : True|False) -> True|False :
    a + b + (1 when carry? else 0) == c + (10 when overthrow? else 0)


defn add-func (sample : Sample n : Int carry? : True|False overthrow? : True|False) -> [True|False True|False] : 
    ; Int means undetermined
    val a = input0[n](sample) when n < length(input0) else 0
    val b = input1[n](sample) when n < length(input1) else 0
    val c = output[n](sample) when n < length(output) else 0
    if a is Int and b is Int and c is Int : 
        [true false] when n == 0 and carry? is True else [true add-digit(a as Int b as Int c as Int carry? overthrow?)]
    else :
        [false true]

var evaluate-count : Int = 0
defn evaluate (sample : Sample) -> True|False :
    evaluate-count = evaluate-count + 1
    val results = Vector<Tuple<[True|False True|False]>>()      ; the first true|false is determined, the second is the result
    for n in 0 to rank do :
        val row-results = [        
            add-func(sample n false false)  ; (3)
            add-func(sample n false true)   ; (4)
            add-func(sample n true false)   ; (5)
            add-func(sample n true true)    ; (6)
        ]
        ; val non-ones-results = [
        ;     [results[n - 1][0][0] and results[n - 1][2][0] and row-results[0][0] 
        ;      (results[n - 1][0][1] or results[n - 1][2][1]) or not row-results[0][1]] ; (7)
        ;     [results[n - 1][0][0] and results[n - 1][2][0] and row-results[1][0] 
        ;      (results[n - 1][0][1] or results[n - 1][2][1]) or not row-results[1][1]] ; (8)
        ;     [results[n - 1][1][0] and results[n - 1][3][0] and row-results[2][0] 
        ;      (results[n - 1][1][1] or results[n - 1][3][1]) or not row-results[2][1]] ; (9)
        ;     [results[n - 1][1][0] and results[n - 1][3][0] and row-results[3][0] 
        ;      (results[n - 1][1][1] or results[n - 1][3][1]) or not row-results[3][1]] ; (10)
        ; ] when n > 0 else [[true true] [true true] [true true] [true true]]
        val non-ones-results = [
            [results[n - 1][0][0] and results[n - 1][2][0] and row-results[0][0] 
             xnor(results[n - 1][0][1] row-results[0][1]) or xnor(results[n - 1][2][1] row-results[0][1])] ; (7)
            [results[n - 1][0][0] and results[n - 1][2][0] and row-results[1][0] 
             xnor(results[n - 1][0][1] row-results[1][1]) or xnor(results[n - 1][2][1] row-results[1][1])] ; (8)
            [results[n - 1][1][0] and results[n - 1][3][0] and row-results[2][0] 
             xnor(results[n - 1][1][1] row-results[2][1]) or xnor(results[n - 1][3][1] row-results[2][1])] ; (9)
            [results[n - 1][1][0] and results[n - 1][3][0] and row-results[3][0] 
             xnor(results[n - 1][1][1] row-results[3][1]) or xnor(results[n - 1][3][1] row-results[3][1])] ; (10)
        ] when n > 0 else to-tuple $ repeat([true true] 4)
        
        val final-result =  [row-results[0][0] and row-results[1][0] and row-results[2][0] and row-results[3][0]
                            (row-results[0][1] or row-results[2][1]) and not row-results[1][1] and not row-results[3][1]] when n == rank - 1 else
                            [row-results[0][0] and row-results[1][0] and row-results[2][0] and row-results[3][0]
                            (row-results[0][1] or row-results[1][1]) and not row-results[2][1] and not row-results[3][1]] when n == 0 else        
                            [row-results[0][0] and row-results[1][0] and row-results[2][0] and row-results[3][0]
                            row-results[0][1] or row-results[1][1] or row-results[2][1] or row-results[3][1]] ; (11)        
        add(results to-tuple $ cat(cat(row-results non-ones-results) [final-result])) 
    ; MSD
    val input0-msd = input0[length(input0) - 1](sample)
    val input1-msd = input1[length(input1) - 1](sample)
    val output-msd = output[length(output) - 1](sample)
    val msd-results = [
        [input0-msd is Int (input0-msd as Int != 0) when input0-msd is Int else true]
        [input1-msd is Int (input1-msd as Int != 0) when input1-msd is Int else true]
        [output-msd is Int (output-msd as Int != 0) when output-msd is Int else true]
    ]
    add(results msd-results)
    dprintln(results)  
    ; determine conflict
    remove-item(results msd-results)
    val conflict = any?{{_} _} $ map{
        fn (t) : 
            t[4] or t[5] or t[6] or t[7] or t[8]        
        _
    } $ map(
        {   
            map(
                fn (t) : (t[0] is True and t[1] is False)
                _
            )
        }
        to-list $ results
    )
    dprintln("conflict = %_ " % [conflict])
    val msd-conflict = any?{{_} _} $ map(
        fn (r) :
            r[0] is True and r[1] is False
        msd-results
    )
    dprintln("msd-result = %_" % [msd-results])
    any?({_} [conflict msd-conflict])

; now we have established evaluate. Let's try to iterate using DPLL
defn to-sample ( ss : Tuple<Int|False|True>) -> Sample :
    Sample(
        ss[0] ss[1] ss[2] ss[3] ss[4] ss[5] ss[6] ss[7]
        ss[8] ss[9] ss[10] ss[11] ss[12] ss[13] ss[14] ss[15]
        ss[16] ss[17] ss[18] ss[19] ss[20] ss[21] ss[22] ss[23]
        ss[24] ss[25]
    )

defn find-from (ss : Tuple<Int|False|True> n : Int v : Int) -> Int :
    var v-r = v
    val ss-v = to-vector<Int|False|True>(ss)
    remove(ss-v n)
    val ss-u = to-tuple $ unique $ filter({_ is Int} ss-v)
    label<False> break:
        while true:
            match(find({v-r == _} ss-u)) :
                (i : Int) : v-r = v-r + 1
                (f) : break(false)
    v-r

defn get-next-ss (ss : Tuple<Int|False|True> n : Int) -> [Int Int] :
    var n-r : Int = n
    var value-r = match(ss[n-r]) :
        (value : Int) : value + 1
        (f : False) : 0
        (t) : 10
    val v = find-from(ss n-r value-r) when value-r < 10 else 10
    if v >= 10 :
        ;n-r = n-r + 1
        n-r = priority-index[index-when!({_ == n-r} priority-index) + 1]
        get-next-ss(ss n-r)
    else :
        [n-r v]

defn terminate? (ss : Tuple<Int|True|False>) -> True|False :
    label<True|False> return:
        var cur = 9  
        for n in 0 to length(ss) do :
            match(ss[n]):
                (v : Int) :
                    if v == cur :
                        cur = cur - 1
                        if cur == 0 :
                            return(true)
                (t : True) :
                    false
                (f) : return(false)
                
defn current-max? (ss : Tuple<Int|False|True> n : Int) -> True|False :
    match(ss[n]):
        (i : Int) :
            var v : Int = i
            label<False> break :
                while v < 10 :
                    v = v + 1
                    match(find({_ == v} ss)) :
                        (f : False) : break(false)
                        (v) : false
            v >= 10
        (f) : false

defn traverse (ss : Tuple<Int|False|True> n : Int) -> [True|False Tuple<Int|False|True> Int] :
    label<[True|False Tuple<Int|False|True> Int]> return :
        var ss-r : Tuple<Int|False|True> = ss
        var n-r : Int = n
        while true :
            dprintln("Input ss=%_ n=%_" % [ss-r n-r])
    
            val ch = get-char(STANDARD-INPUT-STREAM) when debug
            val [next-n next-value] = get-next-ss(ss-r n-r)
            
            val ss-v = to-vector<Int|False|True>(ss)
            ss-v[next-n] = next-value
            val next-ss = to-tuple $ ss-v
            val result = evaluate $ to-sample $ to-tuple $ next-ss
            println("Next ss=%_ n=%_ evaluate=%_ count=%_" % [next-ss next-n result evaluate-count])
            if result :
                ; conflict
                if current-max?(next-ss next-n) :
                    dprintln("Max Reached: Backtrack to [%_] n=%_" % [ss-r n-r])
                    return([false ss-r n-r])
                dprintln("Not Max yet. Try next value")
                ss-r = next-ss
                n-r = next-n
            else :
                if none?({_ is False} next-ss) :
                    println("Success")
                    return([true next-ss next-n])
                else:
                    val ind = index-when!({_ is False} next-ss)
                    val [done new-ss new-n] = traverse(next-ss ind)
                    if done :
                        return([done new-ss new-n])
                    ; conflict 
                    ; i have next-ss and next-n
                    ; received new-ss and new-n
                    if terminate?(new-ss) :
                        return([true new-ss new-n]) 
                    dprintln("Backtracked: [%_] n=%_" % [next-ss next-n])
                    if current-max?(next-ss next-n) :
                        dprintln("Max is hit. Backtrack again")
                        return([false next-ss next-n])
                    ss-r = next-ss
                    n-r = next-n
        [false ss-r n-r]

val ss-v = to-vector<True|False|Int> $ repeat(true 26)

do({
        for x in _ do :
            val i = compare(x 'a')
            ss-v[i] = false
    }
    [to-seq(i0-str) to-seq(i1-str) to-seq(o0-str)]
)
val ss = to-tuple $ ss-v

; test
;    s e n d
;    m o r e
;  m o n e y
;
;    9 5 6 7
;    1 0 8 5
;  1 0 6 5 2
; val ss = [true true true 7 5 true true true true true
;             true true 1 6 0 true true 8 9 true
;             true true true true 2 true]
;println(evaluate $ to-sample $ ss)
val result = traverse(ss priority-index[0])
println(result)
val rs = result[1] as Tuple<Int|False|True>
print-answer(rs)

defn print-one-answer (xs : Seqable<Char> rs : Tuple<True|False|Int>) :
    for x in xs do :
        val i = compare(x 'a')
        val answer = rs[i]
        print("%_=%_ " % [x answer])

defn print-answer (rs : Tuple<Int|False|True>) :
    if none?({_ is False} rs) :
        print("  ")
        for n in 0 to (rank - length(i0)) do:
            print("    ")
        print-one-answer(i0 rs)
        println("")
        print("+ ")
        for n in 0 to (rank - length(i1)) do:
            print("    ")
        print-one-answer(i1 rs)
        println("")
        print("==")
        for n in 0 to rank do:
            print("====")
        println("")
        print("  ")
        for n in 0 to (rank - length(o0)) do:
            print("    ")
        print-one-answer(o0 rs)
        println("")
    else:
        println("Failed")
        println(rs)

